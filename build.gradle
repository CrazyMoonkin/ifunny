plugins {
    id 'jacoco'
    id 'idea'
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
    id 'org.jetbrains.kotlin.kapt' version '1.3.61'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.3.61'
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'io.zensoft.versioning' version '1.1.0' // This plugin made by me and my previous team :)
    id 'com.palantir.docker-compose' version '0.25.0'
}

apply plugin: 'io.spring.dependency-management'

group = 'me.ruslanys'

sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    jcenter()
}

ext {
    jsoupVersion = '1.12.1'
    awsSdkVersion = '2.10.47'
}

dependencies {
    // Kotlin
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-reactor")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8")


    // Spring
    implementation("org.springframework.boot:spring-boot-starter-webflux")
    implementation('org.springframework.boot:spring-boot-starter-freemarker')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation("org.springframework.boot:spring-boot-starter-data-mongodb-reactive")
    implementation("org.springframework.boot:spring-boot-starter-data-redis-reactive")


    // Tools
    implementation("org.jsoup:jsoup:$jsoupVersion")
    implementation('io.micrometer:micrometer-registry-prometheus')
    implementation("software.amazon.awssdk:s3:$awsSdkVersion")
    implementation("software.amazon.awssdk:netty-nio-client:$awsSdkVersion")
    implementation('org.apache.tika:tika-core:1.23')
    implementation('com.github.kilianB:JImageHash:3.0.0')


    // DevTools
    runtimeOnly('org.springframework.boot:spring-boot-devtools')
    kapt('org.springframework.boot:spring-boot-configuration-processor')


    // Tests
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation("io.projectreactor:reactor-test")
    testImplementation("com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0")
}

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    test.kotlin.srcDirs += 'src/test/kotlin'
}

// Jar
bootJar {
    manifest {
        attributes("Implementation-Version": archiveVersion)
    }
}

// Kotlin
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

// Tests
test {
    dependsOn dockerComposeUp
    useJUnitPlatform()

    if (project.hasProperty('maxParallelForks')) {
        maxParallelForks = project.maxParallelForks as int
    }
    if (project.hasProperty('forkEvery')) {
        forkEvery = project.forkEvery as int
    }
    finalizedBy dockerComposeDown
}

dockerComposeUp {
    dependsOn generateDockerCompose
}

jacoco {
    toolVersion = "0.8.5"
}
jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'me/ruslanys/ifunny/*Application*',
                    'me/ruslanys/ifunny/config/**',
                    'me/ruslanys/ifunny/property/**',
                    'me/ruslanys/ifunny/domain/**',
                    'me/ruslanys/ifunny/grab/event/**'
            ])
        })
    }
}
check.dependsOn jacocoTestReport

// IDEA
idea {
    module {
        def kaptMain = file('build/generated/source/kapt/main')
        sourceDirs += kaptMain
        generatedSourceDirs += kaptMain
    }
}

dockerCompose {
    template 'docker-compose.yml'
    dockerComposeFile "${project.buildDir}${File.separator}/docker-compose.yml"
}
